TODO :
DOCKER:
WARNING: The DB_USERNAME variable is not set. Defaulting to a blank string.
WARNING: The DB_PASSWORD variable is not set. Defaulting to a blank string.
WARNING: The DB_NAME variable is not set. Defaulting to a blank string.
WARNING: The PGADMIN_DEFAULT_EMAIL variable is not set. Defaulting to a blank string.
WARNING: The PGADMIN_DEFAULT_PASSWORD variable is not set. Defaulting to a blank string.
JEU :
parties privees, dans other profile, need to connect button to play
connecter alternative mode (qui aura un autre nom)
les parties ne s'arretent pas lorsque l'on change de 'page'. Devraient-elles ?
angle lancement balle à améliorer
CHAT :
channels erreur 400 bad request à la ceation. Rien en se passe quand on clique sur create channel
chat envoi de message > 403 forbidden
manage channel > you seem lost + Uncaught (in promise) TypeError: Failed to execute 'fetch' on 'Window': Request with GET/HEAD method cannot have body.
DELETE http://localhost:9999/api/channels/undefined/1 404 (Not Found)
AUTRES :
gerer invitations de jeu recues
gerer les webtokens (verifier expiration des tokens)
server-side validation/sanitization on forms (mandatory)
in game status
quitter channels
change ball's angle according to where it hits on the paddle
delete sylducam docker-compose
check del, TODO, commentaries

Keep it:
websockets :
1 partie entierement dans le back, 1 entierement dans le front
objet socket dans le front, tu vas faire toutes les requetes avec
websockets permettent communication dans les 2 sens, pas seulement du client vers le serveur
communication en temps reel, a l'inverse d'http
fichier pour faire le routing, dans le back : websocket.gateway.ts
socket.emit msg pour envoyer un message
dans le front : frontend/src/WebsocketContext.tsx > variable socket (export const socket...)
messages ont un "titre" et un message
socket.on pour recevoir les messages
gerer les rooms, avec savoir quels clients sont dans la room
page /otherprofile, est-ce normal ce qu'il s'y affiche ?



TO START THE PROJECT PROPERLY EVERYTIME
DOCKER BUILD
docker-compose up --build -d
FRONT:
http://localhost:3000/
BACK:
http://localhost:9999/
DOCKER LOGS (BACK ?):
docker logs -f nestj
.ENV
add it everytime in backend
INSTALL REACT :
npx create-react-app my-app --template typescript
npm install react-scripts@2.1.0

Le starting point est /Users/sylmac/Desktop/transcendence/srcs/frontend/src/index.tsx (info de mgama)


-------------RESOURCES---------------
https://blog.devoreve.com/2018/06/06/creer-un-pong-en-javascript/ (bon tutoriel, tres clair mais js et non ts. Bon point de depart duquel s'inspirer. correspond au code present dans pong_example2)
https://www.alsacreations.com/tuto/lire/1484-introduction.html (tuto introductif canvas, bien clair aussi)
https://codepen.io/salammia/pen/yjOgyB (un autre pong en js, sans tuto, juste le code. Cewui-ci fonctionne avec les fleches plutot que la souris. J'ai mis le code dans pong_example)
https://codepen.io/mgmarlow/pen/pJgpjj (3e exemple de pong)
https://medium.com/swlh/creating-a-pong-clone-in-phaser-js-swpart-3-e0b1d159e4a7
https://gabrielgambetta.com/client-server-game-architecture.html (pour gerer le lag)
https://www.w3schools.com/js/js_es6.asp (tuto rapide js)
https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html (doc ts)
https://javascript.info/ (doc js)
https://javascript.plainenglish.io/create-ping-pong-game-using-react-2d78c8e1cd9b (pong en react)
https://reactjs.org/tutorial/tutorial.html (react tuto)
https://reactjs.org/docs/hello-world.html (react doc)
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Overview (doc js)
https://grafikart.fr/formations/formation-javascript (formation video js)
https://grafikart.fr/formations/typescript (formation video ts)
https://grafikart.fr/formations/react (formation video react)
https://github.com/Woonggi/Pong (pong, lien donne par Max)
https://github.com/gilessmart/ping (another typescript pong)
https://developer.mozilla.org/en-US/docs/Web/Events (list of js events)
https://www.kirupa.com/html5/keyboard_events_in_javascript.htm (keyboard events tuto)
https://www.kirupa.com/canvas/moving_shapes_canvas_keyboard.htm (how to use keyboard to move canvas elements)
https://www.toptal.com/developers/keycode/table-of-all-keycodes (keycodes of all the keyboard)
https://www.w3schools.com/jsref/obj_event.asp (js event properties)
--REACT--
https://reactjs.org/docs/hooks-intro.html#no-breaking-changes (introduction to react hooks)
https://reactjs.org/docs/hooks-overview.html (another hooks doc)
https://reactjs.org/docs/hooks-reference.html#useref (more hooks doc)
https://reactjs.org/docs/state-and-lifecycle.html (react state and lifecycle doc)
https://reactjs.org/docs/faq-state.html (react state doc)
https://reactjs.org/docs/react-component.html (React.Component doc)
https://reactjs.org/docs/components-and-props.html (react Components and Props doc)

---------- REACT COURSES (actually notes for myself, from what I read on react documentation and
apparented)

find the whole React Namespace file (actually named index.d.ts) in usefull_stuff

----------------------------------------------------------------------------------------------------