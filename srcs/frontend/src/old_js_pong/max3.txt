onst initSockets = (socketClient) => {
		socketClient.on('connected', function (id: number, otherConnected : boolean, room_Name : string, is_Ranked : boolean)
		{
			myId = id;
			initGame(socketClient, game, myId);

			if (id >= 2 || otherConnected)
				otherPlayerConnected = true;
			game.roomName = room_Name;
			game.gameEnded = false;
			game.is_Ranked = is_Ranked;
			utils.disableKeyboard();
			document.getElementById("rooms_buttons").style.opacity = "0";
			document.getElementById("rooms_buttons").style.pointerEvents = "none";
			document.getElementById("quitGame_button").style.opacity = "1";
			document.getElementById("quitGame_button").style.pointerEvents = "auto";
			document.getElementById("game_context").style.display = "block";
			document.getElementById("rooms_buttons").style.display = "none";
		});

		socketClient.on('otherConnected', function (id: number)
		{
			if ((id === 1 || id === 2) && id !== myId)
				otherPlayerConnected = true;
		});

		socketClient.on('updatePlayer', function (data, id: number)
		{
			let player: Player | null = game.getPlayer(id);

			if (player !== null && id !== myId)
			{
				player.x = data.x;
				player.y = data.y;
				player.vitesseX = data.vx;
				player.vitesseY = data.vy;
				player.velocityX = data.vex;
				player.velocityY = data.vey;
			}
		});

		socketClient.on('updatePositionBall', function (x: number, y: number)
		{
			let ball: Ball | null = game.getBall();
			if (ball !== null)
			{
				ball.refreshTrail();
				ball.setnewPosition(x, y);
			}
		});

		socketClient.on("receiveHitPlayer", function (x: number, y: number)
		{
			effect.hit_player(game, x, y);
			game.createInGameText(hitTexts[Math.trunc(utils.randomInRange(0, hitTexts.length))], "rgba(0, 255, 0, 1)", 20);
		});

		socketClient.on("receivePlayerInfos", function (p1Infos, p2Infos, roomName)
		{
			axios.get(`http://localhost:4200/user/id/${p1Infos.level}`, {headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + cookies.transcendence}})
			.then(player_1 => {
				dispatch({type: "user/updateStatus", payload:"Ingame"})
				axios.get(`http://localhost:4200/user/id/${p2Infos.level}`, {headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + cookies.transcendence}})
				.then(player_2 => {
				dispatch({type: "user/updateStatus", payload:"Ingame"})
			if (canReceivePlayerInfo)
			{
				var p1Avatar = document.getElementById("account-picture-img-P1")
				p1Avatar.setAttribute("src", player_1.data.avatar);
				var p1Info = document.createElement("div");
				p1Info.className = "NamePlayerInfo";
				p1Info.textContent = "Name: " + player_1.data.username;
				document.getElementById("players1_infos").appendChild(p1Info);
				var p1Info_Level = document.createElement("div");
				p1Info_Level.className = "NamePlayerInfo";
				p1Info_Level.textContent = "Level: " + player_1.data.level;
				document.getElementById("players1_infos").appendChild(p1Info_Level);
				var p1Info_Rank = document.createElement("div");
				p1Info_Rank.className = "NamePlayerInfo";
				p1Info_Rank.textContent = "Rank: " + player_1.data.rank;
				document.getElementById("players1_infos").appendChild(p1Info_Rank);

				var p2Avatar = document.getElementById("account-picture-img-P2")
				p2Avatar.setAttribute("src", player_2.data.avatar);
				var p2Info_Name = document.createElement("div");
				p2Info_Name.className = "NamePlayerInfo";
				p2Info_Name.textContent = "Name: " + player_2.data.username;
				document.getElementById("players2_infos").appendChild(p2Info_Name);
				var p2Info_Level = document.createElement("div");
				p2Info_Level.className = "NamePlayerInfo";
				p2Info_Level.textContent = "Level: " + player_2.data.level;
				document.getElementById("players2_infos").appendChild(p2Info_Level);
				var p2Info_Rank = document.createElement("div");
				p2Info_Rank.className = "NamePlayerInfo";
				p2Info_Rank.textContent = "Rank: " + player_2.data.rank;
				document.getElementById("players2_infos").appendChild(p2Info_Rank);

				var room_Name = document.createElement("div");
				room_Name.className = "NamePlayerInfo";
				room_Name.textContent = "Room id: " + roomName;
				document.getElementById("RoomId").appendChild(room_Name);

				canReceivePlayerInfo = false;
			}
			})
			})
		});

		socketClient.on("receiveHitWall", function (x: number, y: number)
		{
			effect.hit_wall(x, y);
			game.createInGameText(hitTexts[Math.trunc(utils.randomInRange(0, hitTexts.length))], "rgba(0, 255, 0, 1)", 20);
		});

		socketClient.on("receivePlayerScore", function (scores : number[])
		{
			game.setScore(1, scores[1]);
			game.setScore(2, scores[2]);
		});

		socketClient.on("receiveHitScore", function (x:number, y:number, id:number)
		{
			if (id === myId)
				game.createInGameText(victoryTexts[Math.trunc(utils.randomInRange(0, victoryTexts.length))], "rgba(0, 0, 128, 1)", 30);
			else
				game.createInGameText(looserTexts[Math.trunc(utils.randomInRange(0, looserTexts.length))], "rgba(128, 0, 0, 1)", 30);
			game.lastIndexWin = id;
			effect.playerScore(game, x, y);
		});

		socketClient.on("receiveGameStart", function ()
		{
			utils.startGame(game);
		});

		socketClient.on("receiveGameRestart", function ()
		{
			utils.restartGame(game);
		});

		socketClient.on("receiveCreatePowerUp", function (x, y, name, index)
		{
			game.createPower_Up(x, y, name, index);
		})

		socketClient.on("activBigBall", function()
		{
			game.getBall().radius = 30;
		})

		socketClient.on("deactivBigBall", function()
		{
			game.getBall().radius = 15;
		})

		socketClient.on("destroyPower_Up", function (index)
		{
			for(var i = 0; i < game.power_ups.length; i++)
			{
				if (game.power_ups[i] && game.power_ups[i].index === index)
					destroy(game.power_ups[i], game.power_ups);
			}
		})

		socketClient.on("finishGame", function (winnerName)
		{
			game.endText.setText(winnerName + " win !");
			game.gameEnded = true;
			return new Promise(resolve => {
				setTimeout(function() {
				  resolve("lente");
						var p1Avatar = document.getElementById("account-picture-img-P1")
						p1Avatar.setAttribute("src", "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
						var p2Avatar = document.getElementById("account-picture-img-P2")
						p2Avatar.setAttribute("src", "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png");
						utils.timedEvent(exitGame, 100);
				}, 4000);
			  });
		})
	}